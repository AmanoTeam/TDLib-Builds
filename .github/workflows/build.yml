name: Build

on:
  push:
    branches:
        - '**'
    paths:
        - '**.c'
        - '**.h'
        - 'CMakeLists.txt'
        - 'submodules/**'
        - '.github/workflows/build.yml'        

jobs:
  build:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
      with:
        submodules: true
    - name: Set up LibreSSL
      run: |
        pushd './submodules/libressl'
        ./autogen.sh
        touch './.autogen'
        pushd
    - name: Set up TDLib
      run: |
        declare source_directory="${PWD}"
        declare build_directory='/tmp/tdlib-build'
        
        sudo apt-get install 'gperf'
        
        cmake \
            -B "${build_directory}" \
            -S "${source_directory}/submodules/tdlib"
        cmake --build "${build_directory}" --target 'prepare_cross_compiling' -- --jobs
        cmake --build "${build_directory}" --target 'tl_generate_c' -- --jobs
        
        # pushd "${source_directory}/submodules/tdlib"
        # php SplitSource.php
        # pushd
    - name: Setup OBGGCC cross-compiler
      run: |
        declare -r OBGGCC_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/obggcc/releases/latest')")"
        declare -r OBGGCC_TARBALL='/tmp/toolchain.tar.xz'
        declare -r OBGGCC_URL="https://github.com/AmanoTeam/obggcc/releases/download/${OBGGCC_TAG}/x86_64-unknown-linux-gnu.tar.xz"
        
        curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${OBGGCC_URL}" --output "${OBGGCC_TARBALL}"
        tar --directory="$(dirname "${OBGGCC_TARBALL}")" --extract --file="${OBGGCC_TARBALL}"
        
        echo 'OBGGCC_HOME=/tmp/obggcc' >> "${GITHUB_ENV}"
        echo '/tmp/obggcc/bin' >> "${GITHUB_PATH}"
    - name: Build with CMake
      run: |
        declare -ra targets=(
            x86_64-unknown-linux-gnu2.17
            arm-unknown-linux-gnueabihf2.19
            aarch64-unknown-linux-gnu2.19
            i386-unknown-linux-gnu2.17
        )
        
        declare -r source_directory="${PWD}"
        
        declare -r output_directory="$(realpath './output')"
        mkdir --parent "${output_directory}"
        
        for target in "${targets[@]}"; do
            (
                declare build_directory="${target}-build"
                declare install_prefix="${build_directory}/${target}"
                
                echo "- Building for ${target}"
                
                cmake \
                    -B "${build_directory}" \
                    -S "${source_directory}" \
                    -DTDLIB_ENABLE_LTO='ON' \
                    -DCMAKE_C_FLAGS="-w" \
                    -DCMAKE_TOOLCHAIN_FILE="${source_directory}/.github/workflows/cmake_toolchains/${target}.cmake" \
                    -DCMAKE_INSTALL_PREFIX="${install_prefix}" \
                    -DCMAKE_BUILD_TYPE='Release' 1>/dev/null
                
                echo "- Building dependencies"
                
                cmake --build "${build_directory}" --target 'crypto' -- --jobs 1>/dev/null
                cmake --build "${build_directory}" --target 'tls' -- --jobs 1>/dev/null
                cmake --build "${build_directory}" --target 'ssl' -- --jobs 1>/dev/null
                cmake --build "${build_directory}" --target 'zlib' -- --jobs 1>/dev/null
                
                echo "- Building main project"
                
                cmake --build "${build_directory}"  --target 'tdc' -- --jobs=16 #1>/dev/null
                cmake --build "${build_directory}"  --target 'tdclient' -- --jobs=16 #1>/dev/null
                cmake --build "${build_directory}"  --target 'tdjson' -- --jobs=16 1>/dev/null
                
                echo "- Installing project"
                
                cmake --install "${build_directory}" --strip 1>/dev/null
                
                echo "- Creating compressed archive"
                
                pushd "$(dirname "${install_prefix}")"
                
                if [[ "${target}" == *'mingw32' ]]; then
                    zip --recurse-paths -9 "${output_directory}/${target}.zip" "${target}" 1>/dev/null
                else
                    tar --create --file=- "${target}" |  xz --extreme --threads='0' --compress -9 > "${output_directory}/${target}.tar.xz"
                fi
                
                rm --force --recursive "${build_directory}"
            )
        done
    - name: Upload artifact
      uses: actions/upload-artifact@main
      with:
        path: ./output
    - name: Get tag name for release
      if: startsWith(github.event.head_commit.message, 'Bump version')
      run: echo "VERSION_TAG=${COMMIT_MESSAGE/* }" >> "${GITHUB_ENV}"
      env:
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
    - name: Create release
      if: startsWith(github.event.head_commit.message, 'Bump version')
      uses: softprops/action-gh-release@master
      with:
        tag_name: v${{ env.VERSION_TAG }}
        name: tdlib v${{ env.VERSION_TAG }}
        files: ./output/*
        draft: true
        prerelease: false
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
